/*
 *  The scanner definition for COOL.
 */

/*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Don't remove anything that was here initially
 */
%{
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

/*
 *  Add Your own definitions here
 */
;
int temp=0;		

%}

/*
 * Define names for regular expressions here.//Definiranje regularnih izraza
 */

LETTER      [a-zA-Z_]  /*Velika i mala slova*/
DIGIT       [0-9]	/*Brojevi*/
NEWLINE     (\n)  /*Nova linija*/
Ne_NEWLINE  [^\n] /* Nije Nova linija*/
WHITESPACE  [ \t\r\v]+   /*Bijeli znakovi*/
LINECOMMENT "--"       /*Linija*/
END_COMM	[*)]     /*Kraj komentara*/
TYPEID		[A-Z][_a-zA-Z0-9]*
OBJECTID	[a-z][_a-zA-Z0-9]*



"=>"			{return DARROW;}
"<-"			{return ASSIGN;}
"<="			{return LE;}
        "<"          { return '<'; }
        "@"         { return '@'; }
        "~"         { return '~'; }
        "="         { return '='; }
        "."         { return '.'; }
        "-"         { return '-'; }
        ","         { return ','; }
         "+"         { return '+'; }
         "*"         { return '*'; }
        "/"         { return '/'; }
        "}"         { return '}'; }
        "{"         { return '{'; }
        "("         { return '('; }
        ")"         { return ')'; }
        ":"         { return ':'; }
        ";"         { return ';'; }


%x COMMENT STRING STRINGERROR

%%
  
  /*   Operatori s vise izraza */
 




(t)(?i:rue)		{
				cool_yylval.boolean = true;
				return BOOL_CONST;
			}
(f)(?i:alse)		{
				cool_yylval.boolean = false;
				return BOOL_CONST;
			}


{TYPEID}		{ cool_yylval.symbol = idtable.add_string(yytext);
                  return TYPEID;
                }

{OBJECTID}		{ cool_yylval.symbol = idtable.add_string(yytext);
                  return OBJECTID;
                }





"--".*		;

"*)"			{
				cool_yylval.error_msg = "Unmatched *)";
				return STRINGERROR;
			}
"(*"			{
				++temp;
				BEGIN(COMMENT);				
			}

<COMMENT>"(*"		++temp;
<COMMENT>"*)"		{
				--temp;
				if(temp==0)
					BEGIN(INITIAL);
				if(temp<0){
					cool_yylval.error_msg = "Unmatched *)";
					BEGIN(INITIAL);
					
				}
			}
<COMMENT>\n		++curr_lineno;
<COMMENT>.		;
<COMMENT><<EOF>>	{
				BEGIN(INITIAL);
				if(temp>0){
					cool_yylval.error_msg = "EOF in comment.";
					return STRINGERROR;
				}
			}

"\""			{
				BEGIN(STRING);
				string_buf_ptr = string_buf;
			}    
{LINECOMMENT}{NOT_NEW_LINE}*	;

<STRING>"\""		{
				if(string_buf_ptr - string_buf > MAX_STR_CONST-1){
					cool_yylval.error_msg = "String constant too long";
					BEGIN(STRINGERROR);
					return STRINGERROR;
				}
				*string_buf_ptr = '\0';
				cool_yylval.symbol = stringtable.add_string(string_buf);
				BEGIN(INITIAL);
				return STR_CONST;
			}


<STRING>\n 		{
    			  curr_lineno++;
    			  BEGIN(INITIAL);
    			  cool_yylval.error_msg = "Unterminated string constant";
    			  return STRINGERROR;
			    }
		    
<STRING>\0	{ BEGIN(STRINGERROR);
			  cool_yylval.error_msg = "String contains null character";
			  return (STRINGERROR);
			  
			}
			
<STRING><<EOF>>	{
				cool_yylval.error_msg = "EOF in string constant";
				BEGIN(INITIAL);
				return STRINGERROR;
			    }

<STRING>\\\0	  	{ BEGIN(STRINGERROR);
                    	  cool_yylval.error_msg = "String contains escaped null character.";
                    	  return (STRINGERROR);
                	}

<STRING>"\\n"		{ curr_lineno++;
			  *string_buf_ptr++ = '\n';
			}
                    

<STRING>"\\"[^\0]	*string_buf_ptr++ = yytext[1];
<STRING>.		*string_buf_ptr++ = *yytext;


<STRINGERROR>[^\n|"]		;
<STRINGERROR>\"         	{ BEGIN(INITIAL); }
<STRINGERROR>.     	;


\n		curr_lineno++;

(?i:then)		return THEN;
(?i:class)		return 258;
(?i:else)		return ELSE;
(?i:fi)			return 260;
(?i:in)			return IN;
(?i:inherits)		return 263;
(?i:loop)		return LOOP;
(?i:pool)		return 266;
(?i:while)		return WHILE;
(?i:case)		return 269;
(?i:esac)		return ESAC;
(?i:of)			return 271;
(?i:new)		return NEW;
(?i:isvoid)		return 274;
(?i:not)		return NOT;
(?i:if)			return 260;
(?i:let)		return LET;

";"			{ return int(yytext[0]); }
"."			{ return int(yytext[0]); }
"-"			{ return int(yytext[0]); }
"("			{ return int(yytext[0]); }
"*"			{ return int(yytext[0]); }
")"			{ return int(yytext[0]); }
"{"			{ return int(yytext[0]); }
"}"			{ return int(yytext[0]); }
","			{ return int(yytext[0]); }
":"			{ return int(yytext[0]); }
"@"			{ return int(yytext[0]); }
"+"			{ return int(yytext[0]); }
"/"			{ return int(yytext[0]); }
"~"			{ return int(yytext[0]); }
"<"			{ return int(yytext[0]); }
"="			{ return int(yytext[0]); }


.		{
			cool_yylval.error_msg = yytext;
			return STRINGERROR;
		}

